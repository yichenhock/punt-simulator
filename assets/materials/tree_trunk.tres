[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://assets/textures/tree/tree_trunk_albedo.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/tree/tree_trunk_orm.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/tree/tree_trunk_normal.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_white;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float ambient_wind = 0.1;

float get_hash(vec2 c) {
	return fract(sin(dot(c.xy, vec2(12.9898,78.233))) * 43758.5453);
}

vec3 get_ambient_wind_displacement(vec2 uv, float hash, float time) {
	// TODO This is an initial basic implementation. It may be improved in the future, especially for strong wind.
	float amp = ambient_wind * (1.0 - uv.y);
	// Main displacement
	vec3 disp = amp * vec3(cos(time), 0, sin(time * 1.2));
	// Fine displacement
	float fine_disp_frequency = 2.0;
	disp += 0.2 * amp * vec3(cos(time * (fine_disp_frequency + hash)), 0, sin(time * (fine_disp_frequency + hash) * 1.2));
	return disp;
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec4 obj_pos = WORLD_MATRIX * vec4(0, 1, 0, 1);
	float hash = get_hash(obj_pos.xz);
	VERTEX += get_ambient_wind_displacement(UV2, hash, TIME);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	AO = dot(texture(texture_ambient_occlusion,base_uv),ao_texture_channel);
	AO_LIGHT_AFFECT = ao_light_affect;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 0, 1, 0, 0 )
shader_param/normal_scale = 1.0
shader_param/ao_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/ao_light_affect = 1.0
shader_param/uv1_scale = Vector3( 1, 10, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/ambient_wind = 0.1
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_roughness = ExtResource( 2 )
shader_param/texture_normal = ExtResource( 3 )
shader_param/texture_ambient_occlusion = ExtResource( 2 )
